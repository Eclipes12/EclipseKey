local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local HttpService = game:GetService("HttpService")

local EclipseLib = {
	Elements = {},
	ThemeObjects = {},
	Connections = {},
	Flags = {},
	Themes = {
		Default = {
			Main = Color3.fromRGB(135, 206, 235),    -- Light Sky Blue (background)
			Second = Color3.fromRGB(173, 216, 230),  -- Light Blue (lighter elements)
			Stroke = Color3.fromRGB(70, 130, 180),   -- Steel Blue (for borders/strokes)
			Divider = Color3.fromRGB(176, 224, 230), -- Powder Blue (used for dividing lines)
			Text = Color3.fromRGB(0, 0, 0),           -- Black (for text)
			TextDark = Color3.fromRGB(0, 0, 139)      -- Dark Blue (for dark text, optional)
		}
	},
	SelectedTheme = "Default",
	Folder = nil,
	SaveCfg = false
}

local Icons = {}

-- Load Feather Icons (optional)
local Success, Response = pcall(function()
	Icons = HttpService:JSONDecode(game:HttpGetAsync("https://cdn.discordapp.com/attachments/1311412106549133523/1311466353827385395/Radioactive-1--Streamline-Core.png?ex=6748f5b8&is=6747a438&hm=0aea12727268c76788b82894871a930fcbaffd3f879bcccd0d641d2b62c33a82&")).icons
end)

if not Success then
	warn("\nEclipse Library - Failed to load Feather Icons. Error code: " .. Response .. "\n")
end	

local function GetIcon(IconName)
	if Icons[IconName] then
		return Icons[IconName]
	else
		return nil
	end
end

local Eclipse = Instance.new("ScreenGui")
Eclipse.Name = "Eclipse"
if syn then
	syn.protect_gui(Eclipse)
	Eclipse.Parent = game.CoreGui
else
	Eclipse.Parent = gethui() or game.CoreGui
end

if gethui then
	for _, Interface in ipairs(gethui():GetChildren()) do
		if Interface.Name == Eclipse.Name and Interface ~= Eclipse then
			Interface:Destroy()
		end
	else
		for _, Interface in ipairs(game.CoreGui:GetChildren()) do
			if Interface.Name == EclipseLib.Name and Interface ~= Eclipse then
				Interface:Destroy()
			end
		end
end

-- Function to create a Color Picker
function EclipseLib:CreateColorPicker(parent)
	local ColorpickerBox = Instance.new("Frame")
	ColorpickerBox.Size = UDim2.new(0, 24, 0, 24)
	ColorpickerBox.Position = UDim2.new(0.5, -12, 0.5, 0)
	ColorpickerBox.AnchorPoint = Vector2.new(0.5, 0.5)
	ColorpickerBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ColorpickerBox.BorderSizePixel = 0
	ColorpickerBox.Parent = parent

	local ColorpickerFrame = Instance.new("Frame")
	ColorpickerFrame.Size = UDim2.new(1, 0, 0, 38)
	ColorpickerFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ColorpickerFrame.Parent = parent
	
	local ColorPickerToggle = Instance.new("TextButton")
	ColorPickerToggle.Text = "Pick Color"
	ColorPickerToggle.Size = UDim2.new(0, 150, 0, 50)
	ColorPickerToggle.Position = UDim2.new(0.5, -75, 0.5, 50)
	ColorPickerToggle.BackgroundColor3 = EclipseLib.Themes[EclipseLib.SelectedTheme].Main
	ColorPickerToggle.TextColor3 = EclipseLib.Themes[EclipseLib.SelectedTheme].Text
	ColorPickerToggle.Font = Enum.Font.Gotham
	ColorPickerToggle.TextSize = 18
	ColorPickerToggle.Parent = parent
	
	local function UpdateColorPicker()
		ColorpickerBox.BackgroundColor3 = Color3.fromHSV(math.random(), 1, 1)  -- Update to random color for simplicity
		ColorPickerToggle.BackgroundColor3 = ColorpickerBox.BackgroundColor3
	end
	
	ColorPickerToggle.MouseButton1Click:Connect(UpdateColorPicker)
end

-- Function to create Slider
function EclipseLib:CreateSlider(parent, min, max, initial, callback)
	local slider = Instance.new("Frame")
	slider.Size = UDim2.new(0, 200, 0, 25)
	slider.Position = UDim2.new(0.5, -100, 0.5, 100)
	slider.BackgroundColor3 = EclipseLib.Themes[EclipseLib.SelectedTheme].Main
	slider.Parent = parent
	
	local sliderBar = Instance.new("Frame")
	sliderBar.Size = UDim2.new(1, 0, 0, 5)
	sliderBar.Position = UDim2.new(0, 0, 0.5, -2)
	sliderBar.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
	sliderBar.Parent = slider
	
	local knob = Instance.new("Frame")
	knob.Size = UDim2.new(0, 10, 0, 25)
	knob.Position = UDim2.new(initial / max, -5, 0, 0)
	knob.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
	knob.Parent = slider
	
	local dragging = false
	knob.MouseButton1Down:Connect(function()
		dragging = true
	end)
	
	UserInputService.InputChanged:Connect(function(input)
		if dragging then
			local position = math.clamp((input.Position.X - slider.Position.X.Offset) / slider.Size.X.Offset, 0, 1)
			knob.Position = UDim2.new(position, -5, 0, 0)
			callback(position * max)
		end
	end)
	
	UserInputService.InputEnded:Connect(function(input)
		if dragging then
			dragging = false
		end
	end)
end

-- Function to create Toggle Button
function EclipseLib:CreateToggleButton(parent)
	local toggleButton = Instance.new("TextButton")
	toggleButton.Size = UDim2.new(0, 150, 0, 50)
	toggleButton.Position = UDim2.new(0.5, -75, 0.5, 150)
	toggleButton.BackgroundColor3 = EclipseLib.Themes[EclipseLib.SelectedTheme].Main
	toggleButton.TextColor3 = EclipseLib.Themes[EclipseLib.SelectedTheme].Text
	toggleButton.Font = Enum.Font.Gotham
	toggleButton.TextSize = 18
	toggleButton.Text = "Toggle"
	toggleButton.Parent = parent
	
	local isOn = false
	toggleButton.MouseButton1Click:Connect(function()
		isOn = not isOn
		toggleButton.BackgroundColor3 = isOn and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
	end)
end

-- Function to create Text Box
function EclipseLib:CreateTextBox(parent)
	local textBox = Instance.new("TextBox")
	textBox.Size = UDim2.new(0, 200, 0, 50)
	textBox.Position = UDim2.new(0.5, -100, 0.5, 200)
	textBox.PlaceholderText = "Enter text"
	textBox.BackgroundColor3 = EclipseLib.Themes[EclipseLib.SelectedTheme].Main
	textBox.TextColor3 = EclipseLib.Themes[EclipseLib.SelectedTheme].Text
	textBox.Font = Enum.Font.Gotham
	textBox.TextSize = 18
	textBox.Parent = parent
end

-- Function to create Theme Picker
function EclipseLib:CreateThemePicker(parent)
	local themeButton = Instance.new("TextButton")
	themeButton.Size = UDim2.new(0, 150, 0, 50)
	themeButton.Position = UDim2.new(0.5, -75, 0.5, 300)
	themeButton.BackgroundColor3 = EclipseLib.Themes[EclipseLib.SelectedTheme].Main
	themeButton.TextColor3 = EclipseLib.Themes[EclipseLib.SelectedTheme].Text
	themeButton.Font = Enum.Font.Gotham
	themeButton.TextSize = 18
	themeButton.Text = "Pick Theme"
	themeButton.Parent = parent
	
	themeButton.MouseButton1Click:Connect(function()
		EclipseLib.SelectedTheme = EclipseLib.SelectedTheme == "Default" and "Dark" or "Default"
		themeButton.BackgroundColor3 = EclipseLib.Themes[EclipseLib.SelectedTheme].Main
		themeButton.TextColor3 = EclipseLib.Themes[EclipseLib.SelectedTheme].Text
	end)
end

-- Function to create Notification
function EclipseLib:MakeNotification(config)
	local notification = Instance.new("Frame")
	notification.Size = UDim2.new(0, 300, 0, 100)
	notification.Position = UDim2.new(0.5, -150, 0.5, -50)
	notification.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
	notification.Parent = Eclipse
	
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Size = UDim2.new(1, 0, 0.5, 0)
	titleLabel.Text = config.title
	titleLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
	titleLabel.Font = Enum.Font.GothamBold
	titleLabel.TextSize = 18
	titleLabel.BackgroundTransparency = 1
	titleLabel.Parent = notification
	
	local messageLabel = Instance.new("TextLabel")
	messageLabel.Size = UDim2.new(1, 0, 0.5, 0)
	messageLabel.Text = config.message
	messageLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
	messageLabel.Font = Enum.Font.Gotham
	messageLabel.TextSize = 16
	messageLabel.BackgroundTransparency = 1
	messageLabel.Parent = notification
	
	local closeButton = Instance.new("TextButton")
	closeButton.Text = "Close"
	closeButton.Size = UDim2.new(0, 100, 0, 40)
	closeButton.Position = UDim2.new(0.5, -50, 1, -40)
	closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
	closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
	closeButton.Font = Enum.Font.GothamBold
	closeButton.TextSize = 18
	closeButton.Parent = notification
	
	closeButton.MouseButton1Click:Connect(function()
		notification:Destroy()
	end)
end

-- Initialize all UI components
EclipseLib:CreateColorPicker(Eclipse)
EclipseLib:CreateSlider(Eclipse, 0, 100, 50, function(value) print("Slider Value: ", value) end)
EclipseLib:CreateToggleButton(Eclipse)
EclipseLib:CreateTextBox(Eclipse)
EclipseLib:CreateThemePicker(Eclipse)

return EclipseLib
